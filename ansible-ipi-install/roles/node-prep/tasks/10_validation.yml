---
- name: Check ansible version
  assert:
    that:
      - "ansible_version.full is version('2.9.0', '>=')"
    msg: >
        Use Ansible version 2.9 or greater to run this playbook
  delegate_to: localhost
  tags:
  - always
  - validation
  - fully_disconnected

- name: Ensure Python libraries are installed
  python_requirements_info:
    dependencies:
    - dnspython
    - netaddr
  register: _py_facts
  delegate_to: localhost
  tags:
  - always
  - validation

- name: Fail if Python modules are missing
  fail:
    msg: |
         Missing python module(s) {{ _py_facts.not_found }} on localhost
  when: _py_facts.not_found | length > 0
  tags:
  - always
  - validation

- name: Fail if version is undefined or empty.
  fail:
    msg: "The version is undefined or empty. Use a value such as 'latest-4.3' or 'latest-4.4' or an explicit version."
  when: (version is undefined) or (version|length == 0)
  tags:
  - always
  - validation

- name: Fail if build is undefined or empty
  fail:
    msg: "The build is undefined or empty. Use a value such as 'dev' or 'ga'."
  when: (build is undefined) or (build|length == 0)
  tags:
  - always
  - validation

- name: Fail if a required install-config variable is undefined or empty.
  fail:
    msg: "A variable regarding install-config.yml is undefined or empty."
  when: (domain is undefined) or (domain|length == 0) or (cluster is undefined) or (cluster|length == 0) or (extcidrnet is undefined) or (extcidrnet|length == 0) or (dnsvip is undefined) or (dnsvip|length == 0) or (pullsecret is undefined) or (pullsecret|length == 0)
  tags:
  - always
  - validation

- name: Fail if both bootstraposimage and clusterosimage variables are empty.
  fail:
    msg: "Both bootraposimage and clusterosimage are empty. Please provide a URL or comment out."
  when:
    - bootstraposimage is defined and bootstraposimage|length == 0
    - clusterosimage is defined and clusterosimage|length == 0
  tags:
  - always
  - validation

- name: Conditions to set cache_enabled to true
  set_fact:
    cache_enabled: true
  when: (cache_enabled|bool) or
        (bootstraposimage is undefined and clusterosimage is defined) or
        (bootstraposimage is defined and clusterosimage is undefined) or
        (clusterosimage is defined and bootstraposimage|length == 0) or
        (bootstraposimage is defined and clusterosimage|length == 0)
  tags:
  - always
  - validation

- name: Conditions to set cache_enabled to false
  set_fact:
    cache_enabled: false
  when: (not cache_enabled|bool) or
        (bootstraposimage is defined and clusterosimage is defined)
  tags:
  - always
  - validation

- name: Check whether caching is enabled 
  debug:
    msg: "cache enable {{ cache_enabled }}"
    verbosity: 2
  tags: validation

- name: Verify DNS records for API VIP, Wildcard (Ingress) VIP
  set_fact:
    apivip: "{{ lookup('dig', 'api.{{ cluster |quote }}.{{ domain | quote }}.', '{{ qtype }}' )}}"
    ingressvip: "{{ lookup('dig', 'foo.apps.{{ cluster |quote }}.{{ domain | quote }}.', '{{ qtype }}' )}}"
  when: ((apivip is undefined) or (ingressvip is undefined) or (apivip|length == 0) or (ingressvip|length == 0))
  tags:
  - always
  - validation

- name: Display API VIP IP
  debug:
    msg: "The API VIP is {{ apivip }}"
    verbosity: 2
  tags: validation

- name: Display Ingress VIP IP
  debug:
    msg: "The Wildcard (Ingress) VIP is {{ ingressvip }}"
    verbosity: 2
  tags: validation

- name: Fail if incorrect API VIP
  fail:
    msg: "The API VIP IP seems to be incorrect. Value was NXDOMAIN."
  when: (apivip == 'NXDOMAIN')
  tags:
  - always
  - validation

- name: Fail if incorrect Ingress VIP
  fail:
    msg: "The Ingress VIP IP seems to be incorrect. Value was NXDOMAIN."
  when: (ingressvip == 'NXDOMAIN')
  tags:
  - always
  - validation

- name: Set release_url for development envs
  set_fact:
    release_url: "{{ (webserver_url|length) | ternary(webserver_url, 'https://mirror.openshift.com/pub/openshift-v4/clients/ocp-dev-preview') }}"
  when: build == 'dev'
  tags:
  - always
  - validation

- name: Set release_url for GA envs
  set_fact:
    release_url: "{{ (webserver_url|length) | ternary(webserver_url, 'https://mirror.openshift.com/pub/openshift-v4/clients/ocp') }}"
  when: build == 'ga'
  tags:
  - always
  - validation

- name: Confirm whether or not internet connectivity on provisioner host
  uri:
    url: https://www.redhat.com
    status_code: [-1,200]
    timeout: 1
  register: check_url

- name: Set fact disconnected_registry_auths_file
  set_fact:
    disconnected_registry_auths_file: "{{ hostvars[groups['registry_host'][0]]['disconnected_registry_auths_file'] }}"
  when:
    - groups['registry_host'] is defined
    - groups['registry_host']|length
    - hostvars[groups['registry_host'][0]]['disconnected_registry_auths_file'] is defined
  tags:
  - validation

- name: Set fact disconnected_registry_mirrors_file
  set_fact:
    disconnected_registry_mirrors_file: "{{ hostvars[groups['registry_host'][0]]['disconnected_registry_mirrors_file'] }}"
  when:
    - groups['registry_host'] is defined
    - groups['registry_host']|length
    - hostvars[groups['registry_host'][0]]['disconnected_registry_mirrors_file'] is defined
  tags:
  - validation

- name: Verify Registry host details
  set_fact:
    registry_host_exists: true
  when:
    - groups['registry_host'] is defined
    - groups['registry_host']|length
  tags:
  - validation

- name: Check if disconnected_registry_auths_file is set
  set_fact:
    dra_set: true
  when:
    - disconnected_registry_auths_file is defined
    - disconnected_registry_auths_file is not none
    - disconnected_registry_auths_file | trim != ''
  tags:
  - validation

- name: Check if disconnected_registry_mirrors_file is set
  set_fact:
    drm_set: true
  when:
    - disconnected_registry_mirrors_file is defined
    - disconnected_registry_mirrors_file is not none
    - disconnected_registry_mirrors_file | trim != ''
  tags:
  - validation

- name: Fail when provision host no online access and registry host not creating registry (can't assume access)
  fail:
    msg: |
         A host with online access is required to create cache webserver.
         Either provision host or registry host (if creating registry)
         must be online or you must set the webserver_url to a pre-existing
         URL i.e. http://example.com:8080
  when:
    - check_url.status == -1
    - groups['registry_host'] is defined
    - groups['registry_host']|length
    - dra_set
    - drm_set
    - webserver_url|length == 0
    
- name: Get Release.txt File
  uri:
    url: "{{ release_url }}/{{ version }}/release.txt"
    return_content: yes
  register: result
  failed_when: result.content|length == 0 or result.status >= 400
  delegate_to: "{{ (not dra_set and not drm_set and registry_host_exists) | ternary(groups['registry_host'][0], groups['provisioner'][0]) }}"
  tags:
  - always
  - validation

- name: Set Fact for Release Image
  set_fact:
    release_version: "{{ result.content | regex_search('Version:.*') | regex_replace('Version:\\s*(.*)', '\\1') }}"
    release_image: "{{ result.content | regex_search('Pull From:.*') | regex_replace('Pull From:\\s*(.*)', '\\1') }}"
  tags:
  - always
  - validation

- name: Get the release version
  debug:
    msg: "release version {{ release_version }}"
    verbosity: 2
  tags: validation

- name: Check if openshift-client-linux-{{ version }}.tar.gz exists
  uri:
    url: "{{ release_url }}/{{ version }}/openshift-client-linux-{{ release_version }}.tar.gz"
    method: HEAD
  register: ocp_client_chk
  delegate_to: "{{ (not dra_set and not drm_set and registry_host_exists) | ternary(groups['registry_host'][0], groups['provisioner'][0]) }}"
  tags: validation

- name: Fail if hostgroups not defined in inventory/hosts file
  fail:
    msg: "The masters group is not defined. Please add masters to the inventory/hosts file"
  when: "'masters' not in groups"
  tags:
  - always
  - validation

- name: Set Fact of num of workers and masters based on inventory
  set_fact:
    numworkers: "{{ groups['workers'] | default([]) | length }}"
    nummasters: "{{ groups['masters'] | length }}"
  tags:
  - always
  - validation

- name:  Gather the rpm package facts
  package_facts:
    manager: auto
  tags:
  - always
  - validation

- name: Set Fact for firewall variable
  set_fact:
    firewall: "iptables"
  when: "'iptables-services' in ansible_facts.packages"
  tags:
  - always
  - validation

- name: Set Fact for provisioning nic
  set_fact:
    masters_prov_nic: "{{ prov_nic }}"
  when: (masters_prov_nic is undefined) or (masters_prov_nic|length == 0)
  tags:
  - always
  - validation
