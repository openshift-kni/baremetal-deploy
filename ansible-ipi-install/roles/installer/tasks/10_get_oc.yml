---
- name: Check if creating a new disconnected registry and registry exists
  set_fact:
    registry_creation: true
  when:
    - not dra_set
    - not drm_set
    - registry_host_exists

- name: Find any old tmp dirs with OpenShift related binaries
  find:
    paths: /tmp
    patterns: 'ansible.*'
    file_type: directory
  register: tmp_results
  tags:
  - cleanup
  - getoc

- name: Delete any old tmp dirs with OpenShift related binaries
  file:
    path: "{{ item['path'] }}"
    state: absent
  loop: "{{ tmp_results['files'] }}"
  tags:
  - cleanup
  - getoc

- name: Find any existing /usr/local/bin OpenShift binaries
  find:
    paths: /usr/local/bin
    patterns: 'oc,openshift-baremetal-install,kubectl'
  register: binary_results
  tags:
  - cleanup
  - getoc

- name: Remove any existing /usr/local/bin OpenShift binaries
  file:
    path: "{{ item['path'] }}"
    state: absent
  loop: "{{ binary_results['files'] }}"
  become: yes
  tags:
  - cleanup
  - getoc

- name: Create tmp directory to store OpenShift binaries
  tempfile:
    state: directory
    suffix: "{{ release_version }}"
  register: tempdiroutput
  tags: getoc

- name: Set fact for tmp directory
  set_fact:
    tempdir: "{{ tempdiroutput.path }}"
  tags: getoc

- name: Create tmp directory to store OpenShift binaries on registry host
  tempfile:
    state: directory
    suffix: "{{ release_version }}"
  register: registryhost_tempdir
  when: registry_creation|bool
  delegate_to: "{{ groups['registry_host'][0] }}"
  tags:
  - getoc

- name: Set fact for tmp directory on registry host
  set_fact:
    registry_host_tempdir: "{{ registryhost_tempdir.path }}"
  when: registry_creation|bool
  tags:
  - getoc 

- name: Setting Fact of which ansible temp file to use
  set_fact:
    temp_directory_loc: "{{ (registry_creation) | ternary(registry_host_tempdir, tempdir) }}"
  tags:
  - getoc

- name: Get the ocp client tar gunzip file
  get_url:
    url: "{{ release_url }}/{{ version }}/openshift-client-linux-{{ release_version }}.tar.gz"
    dest: "{{ temp_directory_loc }}"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0755'
  delegate_to: "{{ registry_creation | ternary(groups['registry_host'][0], groups['provisioner'][0]) }}"
  tags: getoc

#If the registry host got the tar, lets just copy it to the prov host 
# 15_disconnected_registry_create.yml can handle extracting to the registry host already
- name: Get the openshift-client-linux-{{ release_version }}.tar.gz from registry host into temp file on control machine
  fetch:
    dest: /tmp/
    flat: yes
    src: "{{ temp_directory_loc }}/openshift-client-linux-{{ release_version }}.tar.gz"
  when: registry_creation|bool
  delegate_to: "{{ groups['registry_host'][0] }}"
  tags:
  - getoc

- name: Copy the openshift-client-linux-{{ release_version }}.tar.gz from control machine to the provisioner host
  copy:
    src: "/tmp/openshift-client-linux-{{ release_version }}.tar.gz"
    dest: "{{ tempdir }}/openshift-client-linux-{{ release_version }}.tar.gz"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: 0755
  become: yes
  when: registry_creation|bool
  tags:
  - getoc

- name: Remove the temporary copy of the openshift-client-linux-{{ release_version }}.tar.gz on control machine
  file:
    path: "/tmp/openshift-client-linux-{{ release_version }}.tar.gz"
    state: absent
  when: registry_creation|bool
  delegate_to: localhost
  tags:
  - getoc
 
- name: "Untar the openshift-client-linux-{{ release_version }}.tar.gz"
  unarchive:
    src: "{{ tempdir }}/openshift-client-linux-{{ release_version }}.tar.gz"
    dest: "{{ tempdir }}"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0755'
    remote_src: yes
  tags: getoc

- name: Copy oc binary to /usr/local/bin
  copy:
    src: "{{ tempdir }}/{{ item }}"
    dest: /usr/local/bin/
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0755'
    remote_src: yes
  become: yes
  loop:
    - kubectl
    - oc
  tags: getoc
