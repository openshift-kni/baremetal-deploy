---
# If we're executing these plays, then:
# 1. cache_enabled is true
# 2. Either one or both bootstraposimage/clusterosimage variables are unset

- name: Confirm whether or not internet connectivity on provisioner host
  uri:
    url: https://www.redhat.com
    status_code: [-1,200]
    timeout: 1
  register: the_url
  tags: cache

- name: Check if url status is 200 is true
  set_fact:
   url_passed : true
  when:
    - the_url.status == 200
  tags: cache

- name: Get URL of host providing the webserver
  set_fact:
    host_url: "{{ url_passed | ternary(groups['provisioner'][0], groups['registry_host'][0]) }}"
  tags: cache

# Ansible didn't like me putting these facts in same task
# separating to get correct value
- name: the host url
  set_fact:
    the_host_url: "{{ host_url }}"
  tags: cache

- name: the_host url
  debug:
    msg: "{{ the_host_url }}"
    verbosity: 2
  tags: cache

- name: Show url_passed value
  debug:
    msg: "{{ url_passed }}"
    verbosity: 2
  tags: cache

#if i made it this far to create a webserver, one of the hosts needs online access
#if disconnected_installer is true use the registry host as it indeed does have access
#if not true use the provision host but only do that when: the_url.status == 200
- name: Fail when provision host no online access and registry host not creating registry (can't assume access)
  fail:
    msg: A host with online access is required to create cache webserver (provision host or a registry host)
  when:
    - the_url.status == -1
    - disconnected_installer|length == 0
  tags: cache

#SELinux when already has httpd_sys_content_t giving issues changing,thus leaving it the same
#for the provision_cache_store to prevent issues. Also removing ":z" from podman_container for
#provision_cache_store in the later task.
- name: Create {{ provision_cache_store }} and {{ httpd_cache_files }} on host with online access
  file:
    path: "{{ item[0] }}"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    setype: "{{ item[1] }}"
    mode: '0775'
  with_nested:
    - [ "{{ provision_cache_store }}" , "{{ httpd_cache_files }}" ]
    - [ 'httpd_sys_content_t', '_default' ]
  delegate_to: "{{ url_passed | ternary(groups['provisioner'][0], groups['registry_host'][0]) }}"
  tags: cache

- name: Add magic and httpd.conf file to {{ httpd_cache_files }} dir
  template:
    src: "{{ item[0] }}"
    dest: "{{ httpd_cache_files }}/{{ item[1] }}"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
  with_nested:
    - [ 'magic.j2', 'httpd_conf.j2' ]
    - [ 'magic', 'httpd.conf' ]
  delegate_to: "{{ url_passed | ternary(groups['provisioner'][0], groups['registry_host'][0]) }}"
  tags: cache

# rhcos_json fact already set in 23_rhcos_image_paths.yaml
- name: Set facts for RHCOS_QEMU_SHA256 and RHCOS_SHA256
  set_fact:
    rhcos_qemu_sha256: "{{ rhcos_json.json | json_query('images.qemu.sha256') }}"
    rhcos_qemu_sha256_unzipped: '{{ rhcos_json.json | json_query(''images.qemu."uncompressed-sha256"'') }}'
    rhcos_sha256: "{{ rhcos_json.json | json_query('images.openstack.sha256') }}"
  tags: cache

- name: Download {{ rhcos_qemu_uri }} for cache
  get_url:
    url:  "{{ rhcos_path }}{{ rhcos_qemu_uri }}"
    dest: "{{ provision_cache_store }}{{ rhcos_qemu_uri }}"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0644'
    setype: httpd_sys_content_t
    checksum: "sha256:{{ rhcos_qemu_sha256 }}"
    timeout: 3600
  when: (bootstraposimage is not defined or bootstraposimage|length < 1)
  delegate_to: "{{ url_passed | ternary(groups['provisioner'][0], groups['registry_host'][0]) }}"
  tags: cache

- name: Download {{ rhcos_uri }} for cache
  get_url:
    url:  "{{ rhcos_path }}{{ rhcos_uri }}"
    dest: "{{ provision_cache_store }}{{ rhcos_uri }}"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0644'
    setype: httpd_sys_content_t
    checksum: "sha256:{{ rhcos_sha256 }}"
    timeout: 3600
  when: (clusterosimage is not defined or clusterosimage|length < 1)
  delegate_to: "{{ url_passed | ternary(groups['provisioner'][0], groups['registry_host'][0]) }}"
  tags: cache

  #use the hostname from the inventory to groups[registry][0] or provisioner[0] as the http://URL
  #use a ternary to toggle between the url status
  #use a ternary for the delegate_to
- name: Get URL of host providing the webserver
  set_fact:
    host_url: "{{ the_url.status == 200 | ternary(groups['provisioner'][0], groups['registry_host'][0]) }}"
  tags: cache

- name: Set bootstrap image URL override if not provided by the user
  set_fact:
    bootstraposimage: "http://{{ the_host_url }}:{{ webserver_caching_port }}/{{ rhcos_qemu_uri }}?sha256={{ rhcos_qemu_sha256_unzipped }}"
  when: bootstraposimage is not defined or bootstraposimage|length < 1
  delegate_to: "{{ url_passed | ternary(groups['provisioner'][0], groups['registry_host'][0]) }}"
  tags: cache

- name: Set cluster image URL override if not provided by the user
  set_fact:
    clusterosimage: "http://{{ the_host_url }}:{{ webserver_caching_port }}/{{ rhcos_uri }}?sha256={{ rhcos_sha256 }}"
  when: clusterosimage is not defined or clusterosimage|length < 1
  delegate_to: "{{ url_passed | ternary(groups['provisioner'][0], groups['registry_host'][0]) }}"
  tags: cache

- name: BootstrapOSImage Details
  debug:
    msg: "{{ bootstraposimage }}"
    verbosity: 2

- name: ClusterOSImage Details
  debug:
    msg: "{{ clusterosimage }}"
    verbosity: 2

#Leaving SELinux details alone and not using ":z"
#for the provision_cache_store due to issues attempting
#to revert context. Leaving behavior as it was previously
#to avoid breaking other user environments.
- name: Start RHCOS image cache container
  podman_container:
    name: rhcos_image_cache
    image: registry.centos.org/centos/httpd-24-centos7:latest
    state: stopped
    network: host
    volumes:
      - "{{ provision_cache_store }}:/var/www/html"
      - "{{ httpd_cache_files }}:/opt/rh/httpd24/root/etc/httpd/conf:z"
  delegate_to: "{{ url_passed | ternary(groups['provisioner'][0], groups['registry_host'][0]) }}"
  tags: cache
  register: rhcos_image_cache_info

- name: Setting facts about container
  set_fact:
    rhcos_image_cache_name: "{{ rhcos_image_cache_info.ansible_facts.podman_container.Name }}"
    rhcos_image_cache_pidfile: "{{ rhcos_image_cache_info.ansible_facts.podman_container.ConmonPidFile }}"
  tags: cache

- name: Ensuring container restarts upon reboot
  block:
    - name: Ensure user specific systemd instance are persistent
      command:  |
              /usr/bin/loginctl enable-linger {{ ansible_user }}

    - name: Create systemd user directory
      file:
        path: "{{ ansible_user_dir }}/.config/systemd/user"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0775'

    - name: Copy the systemd service file
      copy:
        content: |
          [Unit]
          Description=Podman container-cache.service
          [Service]
          Restart=on-failure
          ExecStart=/usr/bin/podman start {{ rhcos_image_cache_name }}
          ExecStop=/usr/bin/podman stop -t 10 {{ rhcos_image_cache_name }}
          KillMode=none
          Type=forking
          PIDFile={{ rhcos_image_cache_pidfile }}
          [Install]
          WantedBy=default.target
        dest: "{{ ansible_user_dir }}/.config/systemd/user/container-cache.service"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0644'

    - name: Reload systemd service
      systemd:
        daemon_reexec: yes
        scope: user
      environment:
        DBUS_SESSION_BUS_ADDRESS: "{{ ansible_env.DBUS_SESSION_BUS_ADDRESS|default('unix:path=/run/user/' +  ansible_effective_user_id|string + '/bus') }}"
    - name: Enable container-cache.service
      systemd:
        name: container-cache.service
        enabled: yes
        scope: user
      environment:
        DBUS_SESSION_BUS_ADDRESS: "{{ ansible_env.DBUS_SESSION_BUS_ADDRESS|default('unix:path=/run/user/' +  ansible_effective_user_id|string + '/bus') }}"
    - name: Start container-cache.service
      systemd:
        name: container-cache.service
        state: started
        scope: user
      environment:
        DBUS_SESSION_BUS_ADDRESS: "{{ ansible_env.DBUS_SESSION_BUS_ADDRESS|default('unix:path=/run/user/' +  ansible_effective_user_id|string + '/bus') }}"
  tags: cache
  delegate_to: "{{ url_passed | ternary(groups['provisioner'][0], groups['registry_host'][0]) }}"
